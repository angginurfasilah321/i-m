// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tenant.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO "Tenant" (
  "location_uuid",
  "category_uuid",
  "name",
  "area_size",
  "bottom_rate_per_month",
  "revenue_sharing_percentage"
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING uuid, location_uuid, category_uuid, name, area_size, bottom_rate_per_month, revenue_sharing_percentage, created_at
`

type CreateTenantParams struct {
	LocationUuid             uuid.NullUUID  `json:"location_uuid"`
	CategoryUuid             uuid.NullUUID  `json:"category_uuid"`
	Name                     sql.NullString `json:"name"`
	AreaSize                 sql.NullString `json:"area_size"`
	BottomRatePerMonth       sql.NullString `json:"bottom_rate_per_month"`
	RevenueSharingPercentage sql.NullString `json:"revenue_sharing_percentage"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant,
		arg.LocationUuid,
		arg.CategoryUuid,
		arg.Name,
		arg.AreaSize,
		arg.BottomRatePerMonth,
		arg.RevenueSharingPercentage,
	)
	var i Tenant
	err := row.Scan(
		&i.Uuid,
		&i.LocationUuid,
		&i.CategoryUuid,
		&i.Name,
		&i.AreaSize,
		&i.BottomRatePerMonth,
		&i.RevenueSharingPercentage,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM "Tenant"
WHERE uuid = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, argUuid)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT uuid, location_uuid, category_uuid, name, area_size, bottom_rate_per_month, revenue_sharing_percentage, created_at FROM "Tenant"
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetTenant(ctx context.Context, argUuid uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenant, argUuid)
	var i Tenant
	err := row.Scan(
		&i.Uuid,
		&i.LocationUuid,
		&i.CategoryUuid,
		&i.Name,
		&i.AreaSize,
		&i.BottomRatePerMonth,
		&i.RevenueSharingPercentage,
		&i.CreatedAt,
	)
	return i, err
}

const getTenantForUpdate = `-- name: GetTenantForUpdate :one
SELECT uuid, location_uuid, category_uuid, name, area_size, bottom_rate_per_month, revenue_sharing_percentage, created_at FROM "Tenant"
WHERE uuid = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTenantForUpdate(ctx context.Context, argUuid uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantForUpdate, argUuid)
	var i Tenant
	err := row.Scan(
		&i.Uuid,
		&i.LocationUuid,
		&i.CategoryUuid,
		&i.Name,
		&i.AreaSize,
		&i.BottomRatePerMonth,
		&i.RevenueSharingPercentage,
		&i.CreatedAt,
	)
	return i, err
}

const listTenant = `-- name: ListTenant :many
SELECT uuid, location_uuid, category_uuid, name, area_size, bottom_rate_per_month, revenue_sharing_percentage, created_at FROM "Tenant"
WHERE name = $1
ORDER BY uuid
LIMIT $2
OFFSET $3
`

type ListTenantParams struct {
	Name   sql.NullString `json:"name"`
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
}

func (q *Queries) ListTenant(ctx context.Context, arg ListTenantParams) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, listTenant, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.Uuid,
			&i.LocationUuid,
			&i.CategoryUuid,
			&i.Name,
			&i.AreaSize,
			&i.BottomRatePerMonth,
			&i.RevenueSharingPercentage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE "Tenant" SET
  "location_uuid" = $1,
  "category_uuid" = $2,
  "name" = $3,
  "area_size" = $4,
  "bottom_rate_per_month" = $5,
  "revenue_sharing_percentage" = $6
WHERE "uuid" = $7
RETURNING uuid, location_uuid, category_uuid, name, area_size, bottom_rate_per_month, revenue_sharing_percentage, created_at
`

type UpdateTenantParams struct {
	LocationUuid             uuid.NullUUID  `json:"location_uuid"`
	CategoryUuid             uuid.NullUUID  `json:"category_uuid"`
	Name                     sql.NullString `json:"name"`
	AreaSize                 sql.NullString `json:"area_size"`
	BottomRatePerMonth       sql.NullString `json:"bottom_rate_per_month"`
	RevenueSharingPercentage sql.NullString `json:"revenue_sharing_percentage"`
	Uuid                     uuid.UUID      `json:"uuid"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant,
		arg.LocationUuid,
		arg.CategoryUuid,
		arg.Name,
		arg.AreaSize,
		arg.BottomRatePerMonth,
		arg.RevenueSharingPercentage,
		arg.Uuid,
	)
	var i Tenant
	err := row.Scan(
		&i.Uuid,
		&i.LocationUuid,
		&i.CategoryUuid,
		&i.Name,
		&i.AreaSize,
		&i.BottomRatePerMonth,
		&i.RevenueSharingPercentage,
		&i.CreatedAt,
	)
	return i, err
}
